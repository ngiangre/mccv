{
  "hash": "70262245573c014b3dc624f81aec7cf1",
  "result": {
    "markdown": "---\ntitle: \"Getting Started\"\nformat:\n  html:\n    code-fold: true\n    code-summary: 'Show The Code'\n---\n\n\nWe start out with a dataset where we want to evaluate an outcome, Y, to be predicted by an independent variable, X. In this example, X determines Y and so we expect Y to be predicted by X to some degree. MCCV can be used to quantify that prediction. We'll refer to the observations as patients, as you can view the dataset applying to patients experiencing an outcome during or at the end of a clinical trial.\n\nBelow, I'm demonstrating how I would go between Python and R, but you can stay solely in R or Python.\n\n# Generate a Dataset: Binary outcome Y and independent variable(s) X\n\n\n::: {.cell hash='getting_started_cache/html/unnamed-chunk-1_c24eef686ecdfad0a76720bf15955b7c'}\n\n```{.python .cell-code}\n\nimport numpy as np\nN=100\nX1 = np.random.normal(loc=0,scale=1,size=N)\nX2 = np.random.normal(loc=1,scale=1,size=N)\nX = np.concatenate([X1,X2])\nY = np.concatenate([np.repeat(0,N),np.repeat(1,N)])\n```\n:::\n\n::: {.cell hash='getting_started_cache/html/unnamed-chunk-2_ffd9f506aded0f442a4c57c3bac8361f'}\n\n```{.r .cell-code}\ndf <- \n    tibble::tibble(\n        X = reticulate::py$X,\n        Y = reticulate::py$Y\n        )\ndf[['Y']] <- factor(df$Y,levels=c(0,1))\n\nlibrary(ggplot2)\nggplot(data=df,mapping=aes(Y,X,color=Y)) +\n    geom_boxplot(alpha=0) +\n    geom_point(position=position_jitter(width=0.2)) +\n    scale_color_brewer(palette=\"Set1\") +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](getting_started_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n# Employ MCCV: Predict Y from X\n\n\n::: {.cell hash='getting_started_cache/html/unnamed-chunk-3_bfdcdf618b48b0b96fa2e441e178c75a'}\n\n```{.python .cell-code}\nimport pandas as pd\ndf = pd.DataFrame(data={'X' : X,'Y' : Y})\ndf.index.name = 'pt'\n\nX = df.loc[:,['X']]\nY = df.loc[:,['Y']]\n```\n:::\n\n::: {.cell hash='getting_started_cache/html/unnamed-chunk-4_f398ea2744873d48c3fd40f803a83615'}\n\n```{.python .cell-code}\nimport mccv\nmccv_obj = mccv.mccv(num_bootstraps=200,n_jobs=2)\nmccv_obj.set_X(X)\nmccv_obj.set_Y(Y)\nmccv_obj.run_mccv()\n```\n:::\n\n::: {.cell hash='getting_started_cache/html/unnamed-chunk-5_1d796d125c78c5b1f20977c6edcdb569'}\n\n```{.python .cell-code}\nml_df = mccv_obj.mccv_data['Model Learning']\nf_imp_df = mccv_obj.mccv_data['Feature Importance']\npreds_df = mccv_obj.mccv_data['Performance']\npt_preds_df = (\n    mccv_obj.mccv_data['Patient Predictions'].\n    reset_index()\n    )\n```\n:::\n\n\n# Visualize prediction results\n\n\n::: {.cell hash='getting_started_cache/html/unnamed-chunk-6_2238cf9e5210f69f786d6e91117a5729'}\n\n```{.r .cell-code}\nlibrary(magrittr)\np1 <- reticulate::py$ml_df %>% \n    tidyr::pivot_longer(\n        cols = dplyr::contains('roc')\n    ) %>% \n    dplyr::mutate(\n        name = factor(name,levels=c(\n            \"train_roc_auc\",\"test_roc_auc\",\n            \"validation_roc_auc\"\n        ))\n    ) %>% \n    ggplot(aes(model,value,color=name)) +\n    geom_boxplot(alpha=0) +\n    geom_point(aes(group=name),\n               position=position_jitterdodge(\n                   dodge.width = 0.7,\n                   jitter.width = 0.1\n                   )\n               ) +\n    scale_color_brewer(palette=\"Set1\") +\n    scale_y_continuous(limits=c(0,1)) +\n    theme_bw() +\n    labs(title=\"Model performance results\")\np2 <- reticulate::py$f_imp_df %>% \n    ggplot(aes(feature,importance,color=feature)) +\n    geom_boxplot(alpha=0) +\n    geom_point(position=position_jitter(width=0.2)) +\n    scale_color_brewer(palette=\"Set2\") +\n    theme_bw() +\n    labs(title=\"Model feature importance results\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in py_to_r.pandas.core.frame.DataFrame(x): index contains duplicated\nvalues: row names not set\n```\n:::\n\n```{.r .cell-code}\np3 <- reticulate::py$preds_df %>% \n    ggplot(aes(metric,value)) +\n    geom_boxplot(alpha=0) +\n    geom_point(pch=21,\n               position=position_jitter(width=0.2)) +\n    theme_bw() +\n    labs(title=\"Model validation predictions\",\n         subtitle=\"From bootstrap of patient probabilities\")\np4 <- reticulate::py$pt_preds_df %>% \n    dplyr::mutate(\n        y_true = factor(y_true,levels=c(0,1))\n    ) %>% \n    dplyr::group_by(bootstrap,model,y_true) %>% \n    dplyr::summarise(\n        mean_y_proba = mean(y_proba),\n        .groups = \"drop\"\n    ) %>% \n    ggplot(aes(y_true,mean_y_proba,color=y_true)) +\n    geom_boxplot(alpha=0) +\n    geom_point(position=position_jitter(width=0.2)) +\n    scale_color_manual(values=c(\"orange\",\"purple\")) +\n    facet_wrap(~model) +\n    scale_y_continuous(limits=c(0,1)) +\n    theme_bw() +\n    labs(title=\"Patient class predictions\",\n         subtitle=\"Average of bootstrap probabilities per patient\")\n\nlibrary(patchwork)\np1 + p2 + p3 + p4 + plot_layout(ncol = 2)\n```\n\n::: {.cell-output-display}\n![](getting_started_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThese plots are an overview to the main results generated by this algorithm:\n\n1.  The performance of the model, across the bootstraps, during training and testing (within 10 fold cross validation) and also validation on the unseen patients.\n2.  The coefficients or importances quantified by the model fit on the entire training (train+test from above) dataset after the 10-fold cross validation for hyperparameter tuning.\n3.  The model validation predictions derived by bootstrapping (N=50) the resulting patient probabilities.\n4.  The predicted patient probabilities compared to the true patient classes or outcomes. Here, the probabilities were averaged per patient across the bootstraps.\n\n# Interpreting MCCV predictions\n\nSome observations from this small example:\n\n-   As expected, the testing performance is much higher than the model training performance. The model validation performance has more variance.\n\n-   Y is directly derived from X and so we see a large importance for X in predicting Y. The intercept doesn't have much meaning in this contrived example, but could be meaningful depending on the dataset.\n\n-   The performance after bootstrapping the patient probabilities has less variance compared to the first graph, but is within the middle 50% of that distribution. This performance measure should be used because it has reduced bias from sampling all computed patient probabilities.\n\n-   The average patient probabilities across bootstraps show the average prediction by that classifier on an individual basis, as well as the per patient variance. This allows for examining further how variable a model can be for certain patient subpopulations for the classification task.\n\n# Go further with MCCV\n\n-   You can compute random permutations in order to compare your 'observed' model to just randomly shuffling your data. You can make similar plots with data from the method `run_permuted_mccv`:\n\n\n::: {.cell hash='getting_started_cache/html/unnamed-chunk-7_a4f0c58656d15ed3631915b9b7eb6423'}\n\n```{.python .cell-code}\nmccv_obj.run_permuted_mccv()\n```\n:::\n\n\n-   See the model evaluations and validations in these references for some ideas like model calibration and deriving model equations:\n\n    -   Giangreco, N.P., Lebreton, G., Restaino, S. et al. Alterations in the kallikrein-kinin system predict death after heart transplant. Sci Rep 12, 14167 (2022). <https://doi.org/10.1038/s41598-022-18573-2>\n\n    -   Giangreco et al. 2021. Plasma kallikrein predicts primary graft dysfunction after heart transplant. Journal of Heart and Lung Transplantation, 40(10), 1199-1211. <https://doi.org/10.1016/j.healun.2021.07.001>.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}