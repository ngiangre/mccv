{
  "hash": "7ac6453278467ed9a0efb09e73a858c2",
  "result": {
    "markdown": "---\ntitle: \"Monte Carlo Cross Validation\"\n---\n\n\n## ⚠️ Work In Progress! ⚠️\n\n# Robust and interpretable prediction\n\nBinary and Multi-classification algorithm for adverse outcome detection, survival classification, and endpoint prediction (see references for details)\n\n![](MCCV_prediction_scheme.png)\n\n# Objectives of this project\n\n1.  Build the *mccv* python package: easily implement and perform MCCV for learning and prediction tasks.\n2.  Showcase accessibly to build, validate, and interpret MCCV classifiers.\n3.  Demonstrate use in both python and R for diverse community implementations.\n\n# Installation\n\n    mkdir ~/my_directory #choose where to clone the mccv repository\n    cd ~/my_directory\n    git clone https://github.com/ngiangre/mccv.git\n    cd mccv/\n    python3 -m pip install .\n\n# Usage\n\n::: panel-tabset\n# Python\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_6e5bb6a79c795f41df16488fbc4adb77'}\n\n```{.python .cell-code}\nimport pandas as pd\ndata = pd.read_csv('data/data.csv',index_col=0) # Feature column name is 'biomarker' and response column  name is 'status'\ndata.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     status  biomarker\nobs                   \n1         0   1.665731\n2         0  -0.875837\n3         0  -1.391374\n4         0  -0.297352\n5         1   0.189857\n```\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_0e1601e728c67e7c1f897329659653b5'}\n\n```{.python .cell-code}\nimport mccv\nmccv_obj = mccv.mccv(num_bootstraps=200)\nmccv_obj.set_X( data.loc[:,['biomarker']] )\nmccv_obj.set_Y( data.loc[:,['status']] )\nmccv_obj.run_mccv()\nmccv_obj.run_permuted_mccv()\n\n#Output\nfor n in mccv_obj.mccv_data:\n    print(n)\n    mccv_obj.mccv_data[n].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel Learning\n   bootstrap                model  ...  train_roc_auc  validation_roc_auc\n0          0  Logistic Regression  ...       0.529453            0.611111\n1          1  Logistic Regression  ...       0.515235            0.732143\n2          2  Logistic Regression  ...       0.543056            0.400000\n3          3  Logistic Regression  ...       0.519728            0.727273\n4          4  Logistic Regression  ...       0.554054            0.574074\n\n[5 rows x 5 columns]\nFeature Importance\n   bootstrap    feature  importance                model\n0          0  biomarker    1.010712  Logistic Regression\n1          0  Intercept   -0.599959  Logistic Regression\n0          1  biomarker    0.509404  Logistic Regression\n1          1  Intercept   -0.226465  Logistic Regression\n0          2  biomarker    1.591529  Logistic Regression\nPatient Predictions\n     bootstrap                model  y_pred   y_proba  y_true\nobs                                                          \n27           0  Logistic Regression       0  0.384426       1\n87           0  Logistic Regression       1  0.601268       0\n3            0  Logistic Regression       0  0.401035       0\n56           0  Logistic Regression       1  0.512297       1\n76           0  Logistic Regression       0  0.392718       0\nPerformance\n                 model   metric  performance_bootstrap     value\n0  Logistic Regression  roc_auc                      0  0.468092\n1  Logistic Regression  roc_auc                      1  0.467906\n2  Logistic Regression  roc_auc                      2  0.481271\n3  Logistic Regression  roc_auc                      3  0.481514\n4  Logistic Regression  roc_auc                      4  0.476277\n```\n:::\n\n```{.python .cell-code}\nfor n in mccv_obj.mccv_permuted_data:\n    print(n)\n    mccv_obj.mccv_permuted_data[n].head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel Learning\n   bootstrap                model  ...  train_roc_auc  validation_roc_auc\n0          0  Logistic Regression  ...       0.506233            0.642857\n1          1  Logistic Regression  ...       0.492030            0.703704\n2          2  Logistic Regression  ...       0.510135            0.537037\n3          3  Logistic Regression  ...       0.506944            0.703704\n4          4  Logistic Regression  ...       0.589547            0.340909\n\n[5 rows x 5 columns]\nFeature Importance\n   bootstrap    feature  importance                model\n0          0  biomarker   -0.195845  Logistic Regression\n1          0  Intercept    0.078774  Logistic Regression\n0          1  biomarker   -0.630019  Logistic Regression\n1          1  Intercept    0.238267  Logistic Regression\n0          2  biomarker    0.165976  Logistic Regression\nPatient Predictions\n     bootstrap                model  y_pred   y_proba  y_true\nobs                                                          \n27           0  Logistic Regression       1  0.513434       1\n87           0  Logistic Regression       0  0.470765       0\n3            0  Logistic Regression       1  0.510061       0\n56           0  Logistic Regression       0  0.488249       1\n76           0  Logistic Regression       1  0.511744       1\nPerformance\n                 model   metric  performance_bootstrap     value\n0  Logistic Regression  roc_auc                      0  0.439984\n1  Logistic Regression  roc_auc                      1  0.442234\n2  Logistic Regression  roc_auc                      2  0.449432\n3  Logistic Regression  roc_auc                      3  0.439897\n4  Logistic Regression  roc_auc                      4  0.449552\n```\n:::\n:::\n\n\n# R\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_290016333eb7ccb13f49972e8e644ae8'}\n\n```{.r .cell-code}\nif(!requireNamespace(\"readr\")){install.packages(\"readr\")}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required namespace: readr\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\ndata <- read_csv(\"data/data.csv\",col_types = c(\"iid\")) #set obs as integer, status as integer, and biomarker as double\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n    obs status biomarker\n  <int>  <int>     <dbl>\n1     1      0     1.67 \n2     2      0    -0.876\n3     3      0    -1.39 \n4     4      0    -0.297\n5     5      1     0.190\n6     6      0     2.20 \n```\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_3730cfee05f8ca9cc9778bdeed6c6013'}\n\n```{.r .cell-code}\nif(!requireNamespace(\"reticulate\")){install.packages(\"reticulate\")}\nmccv = reticulate::import('mccv')\nmccv_obj = mccv$mccv(num_bootstraps = as.integer(200))\n\nX = reticulate::r_to_py(data[,c('obs','biomarker')])\nX = X$set_index(reticulate::r_to_py('obs'))\n\ny = reticulate::r_to_py(data[,c('obs','status')])\ny = y$set_index(reticulate::r_to_py('obs'))\n\nmccv_obj$set_X(X)\nmccv_obj$set_Y(y)\nmccv_obj$run_mccv()\nmccv_obj$run_permuted_mccv()\n\n#Output\nlapply(mccv_obj$mccv_data,head)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$`Model Learning`\n  bootstrap               model test_roc_auc train_roc_auc validation_roc_auc\n1         0 Logistic Regression       1.0000     0.5294525          0.6111111\n2         1 Logistic Regression       0.8000     0.5152355          0.7321429\n3         2 Logistic Regression       1.0000     0.5430556          0.4000000\n4         3 Logistic Regression       0.8750     0.5197279          0.7272727\n5         4 Logistic Regression       0.8125     0.5540541          0.5740741\n6         5 Logistic Regression       1.0000     0.5499325          0.5357143\n\n$`Feature Importance`\n  bootstrap   feature importance               model\n1         0 biomarker  1.0107122 Logistic Regression\n2         0 Intercept -0.5999590 Logistic Regression\n3         1 biomarker  0.5094043 Logistic Regression\n4         1 Intercept -0.2264652 Logistic Regression\n5         2 biomarker  1.5915295 Logistic Regression\n6         2 Intercept -0.9376893 Logistic Regression\n\n$`Patient Predictions`\n  bootstrap               model y_pred   y_proba y_true\n1         0 Logistic Regression      0 0.3844259      1\n2         0 Logistic Regression      1 0.6012685      0\n3         0 Logistic Regression      0 0.4010353      0\n4         0 Logistic Regression      1 0.5122970      1\n5         0 Logistic Regression      0 0.3927179      0\n6         0 Logistic Regression      0 0.4658372      1\n\n$Performance\n                model  metric performance_bootstrap     value\n1 Logistic Regression roc_auc                     0 0.4680915\n2 Logistic Regression roc_auc                     1 0.4679058\n3 Logistic Regression roc_auc                     2 0.4812715\n4 Logistic Regression roc_auc                     3 0.4815138\n5 Logistic Regression roc_auc                     4 0.4762772\n6 Logistic Regression roc_auc                     5 0.4696288\n```\n:::\n\n```{.r .cell-code}\nlapply(mccv_obj$mccv_permuted_data,head)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$`Model Learning`\n  bootstrap               model test_roc_auc train_roc_auc validation_roc_auc\n1         0 Logistic Regression       0.5500     0.5062327          0.6428571\n2         1 Logistic Regression       0.8000     0.4920305          0.7037037\n3         2 Logistic Regression       0.5625     0.5101351          0.5370370\n4         3 Logistic Regression       0.8000     0.5069444          0.7037037\n5         4 Logistic Regression       0.9000     0.5895470          0.3409091\n6         5 Logistic Regression       0.7000     0.5360111          0.5178571\n\n$`Feature Importance`\n  bootstrap   feature  importance               model\n1         0 biomarker -0.19584525 Logistic Regression\n2         0 Intercept  0.07877354 Logistic Regression\n3         1 biomarker -0.63001932 Logistic Regression\n4         1 Intercept  0.23826705 Logistic Regression\n5         2 biomarker  0.16597553 Logistic Regression\n6         2 Intercept -0.01437680 Logistic Regression\n\n$`Patient Predictions`\n  bootstrap               model y_pred   y_proba y_true\n1         0 Logistic Regression      1 0.5134336      1\n2         0 Logistic Regression      0 0.4707655      0\n3         0 Logistic Regression      1 0.5100614      0\n4         0 Logistic Regression      0 0.4882488      1\n5         0 Logistic Regression      1 0.5117439      1\n6         0 Logistic Regression      0 0.4972600      1\n\n$Performance\n                model  metric performance_bootstrap     value\n1 Logistic Regression roc_auc                     0 0.4399838\n2 Logistic Regression roc_auc                     1 0.4422338\n3 Logistic Regression roc_auc                     2 0.4494321\n4 Logistic Regression roc_auc                     3 0.4398971\n5 Logistic Regression roc_auc                     4 0.4495525\n6 Logistic Regression roc_auc                     5 0.4435271\n```\n:::\n:::\n\n:::\n\n# Contribute\n\nPlease do! Reach out to Nick directly (nick.giangreco\\@gmail.com), make an issue, or make a pull request.\n\n# License\n\nThis software is released under the MIT license, which can be found in LICENSE in the root directory of this repository.\n\n# Citation\n\nGiangreco, N.P., Lebreton, G., Restaino, S. et al. Alterations in the kallikrein-kinin system predict death after heart transplant. Sci Rep 12, 14167 (2022). <https://doi.org/10.1038/s41598-022-18573-2>\n\nGiangreco et al. 2021. Plasma kallikrein predicts primary graft dysfunction after heart transplant. Journal of Heart and Lung Transplantation, 40(10), 1199-1211. <https://doi.org/10.1016/j.healun.2021.07.001>.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}