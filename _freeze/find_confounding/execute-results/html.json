{
  "hash": "23cea33b662acb013b44563fe3596ae7",
  "result": {
    "markdown": "---\ntitle: \"Confounding Illustrated with MCCV\"\nformat:\n  html:\n    code-fold: true\n    code-summary: 'Show The Code'\n---\n\n\nOne of the many subtasks wehn performing a prediction scheme is to include confounding variables. But what is a confounder and why include it? Counfounders can be illustrated using a causal diagram (From [this Wikipedia page](https://en.wikipedia.org/wiki/Confounding)):\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Comparison_confounder_mediator.svg/2560px-Comparison_confounder_mediator.svg.png)\n\nAs you can see, a confounding variable is something that confounds or 'confuses' the relationship between an exposure and an outcome. The relationship between an exposure X and an outcome Y is influenced by a confounding variable Z.\n\nHere, I will show how MCCV can be used to identify confounders.\n\n# Generate dataset with X, Y, and Z variables\n\n\n::: {.cell hash='find_confounding_cache/html/unnamed-chunk-1_d3adda19062781e272d65c09cc51842b'}\n\n```{.python .cell-code}\n\nimport numpy as np\nN=100\nZ1 = np.random.normal(loc=0,scale=1,size=N)\nZ2 = np.random.normal(loc=1,scale=1,size=N)\nZ = np.concatenate([Z1,Z2])\nY = np.concatenate([np.repeat(0,N),np.repeat(1,N)])\nX = Z + np.random.normal(loc=0,scale=1,size=len(Z))\n```\n:::\n\n::: {.cell hash='find_confounding_cache/html/unnamed-chunk-2_1b9830ae30f3c4756b2ba15e37be4b99'}\n\n```{.r .cell-code}\ndf <- tibble::tibble(\n    X = reticulate::py$X,\n    Y = reticulate::py$Y,\n    Z = reticulate::py$Z\n)\ndf[['Y']] <- factor(df$Y,levels=c(0,1))\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 3\n           X Y             Z\n   <dbl[1d]> <fct> <dbl[1d]>\n 1   -0.861  0       -0.0394\n 2   -0.0157 0       -0.649 \n 3    0.857  0        0.626 \n 4    1.78   0        1.84  \n 5   -1.33   0       -0.539 \n 6    0.688  0       -1.40  \n 7   -0.132  0        0.949 \n 8    0.636  0       -0.702 \n 9    1.43   0        0.606 \n10   -0.276  0       -0.319 \n# … with 190 more rows\n```\n:::\n\n```{.r .cell-code}\nGGally::ggpairs(df)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](find_confounding_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n# Employ MCCV: Predict Y from X, Y from Z, Y from X and Z\n\n\n::: {.cell hash='find_confounding_cache/html/unnamed-chunk-3_4c60b9cb36082004fc756baad733468c'}\n\n```{.python .cell-code}\nimport pandas as pd\ndf = pd.DataFrame(data={'X' : X,'Y' : Y,'Z' : Z})\ndf.index.name = 'pt'\n\nX = df.loc[:,['X']]\nY = df.loc[:,['Y']]\nZ = df.loc[:,['Z']]\nXZ = df.loc[:,['X','Z']]\n```\n:::\n\n::: {.cell hash='find_confounding_cache/html/unnamed-chunk-4_0659138b6bb8b9ba15bc8bd5101d4a08'}\n\n```{.python .cell-code}\nimport mccv\n\nmccv_YXobj = mccv.mccv(num_bootstraps=200,n_jobs=2)\nmccv_YXobj.set_X(X)\nmccv_YXobj.set_Y(Y)\nmccv_YXobj.run_mccv()\n\nmccv_YZobj = mccv.mccv(num_bootstraps=200,n_jobs=2)\nmccv_YZobj.set_X(Z)\nmccv_YZobj.set_Y(Y)\nmccv_YZobj.run_mccv()\n\nmccv_YXZobj = mccv.mccv(num_bootstraps=200,n_jobs=2)\nmccv_YXZobj.set_X(XZ)\nmccv_YXZobj.set_Y(Y)\nmccv_YXZobj.run_mccv()\n```\n:::\n\n::: {.cell hash='find_confounding_cache/html/unnamed-chunk-5_4067550cde23ebf04f675df8d686d352'}\n\n```{.python .cell-code}\n\nf_imp_dfs = dict()\nf_imp_dfs['YXobj'] = \\\nmccv_YXobj.mccv_data['Feature Importance']\nf_imp_dfs['YZobj'] = \\\nmccv_YZobj.mccv_data['Feature Importance']\nf_imp_dfs['YXZobj'] = \\\nmccv_YXZobj.mccv_data['Feature Importance']\n```\n:::\n\n\n# Visualize feature importances\n\n\n::: {.cell hash='find_confounding_cache/html/unnamed-chunk-6_a9c2e79efb04264fe09ad48713ae1033'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nf_imp_plot <- function(x,title){\n    ggplot(x,aes(feature,importance,color=feature)) +\n    geom_boxplot(alpha=0) +\n    geom_point(position=position_jitter(width=0.2)) +\n    scale_color_manual(values=c(\"X\" = \"indianred\",\n                                \"Y\" = \"skyblue\",\n                                \"Z\" = \"black\",\n                                \"Intercept\" = \"gray\")) +\n    theme_bw() +\n    labs(title=title)\n}\n\nlibrary(patchwork)\n(f_imp_plot( reticulate::py$f_imp_dfs$YXobj,\"Y ~ X\" ) +\n    f_imp_plot( reticulate::py$f_imp_dfs$YZobj,\"Y ~ Z\" ) ) /\n    f_imp_plot( reticulate::py$f_imp_dfs$YXZobj,\"Y ~ X + Z\" )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n\nWarning in py_to_r.pandas.core.frame.DataFrame(object): index contains\nduplicated values: row names not set\n```\n:::\n\n::: {.cell-output-display}\n![](find_confounding_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nIn this example, Z is confounding the relationship between X and Y. The 'Y \\~ X' model shows that X is very important in predicting Y. However, when Z is included in the model 'Y \\~ X + Z', you see that Z remains very important but X is no longer important for predicting Y.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}