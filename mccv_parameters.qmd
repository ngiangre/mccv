---
title: "Learning Parameters"
format:
  html:
    code-fold: true
    code-summary: 'Show The Code'
---

Refitting the model per learned parameters from K-fold cross validation during training is a key step in the Monte Carlo Cross Validation (MCCV) methodology. However, the `run_mccv()` function that runs the entire MCCV procedure does not return these learned parameters. In this article, the learned parameters are extracted from 10-fold cross validation of a Logistic Regression model. These learned parameters are 200 intercepts and coefficients later refit to the entire training set. Here, we visualize the distribution of the learned parameters to illustrate the learning process.

```{python}
#| warning: false
#| cache: true
import numpy as np
import scipy as sc
import pandas as pd

N=100
np.random.seed(0)
Z1 = np.random.beta(2,3,size=N,)
np.random.seed(0)
Z2 = np.random.beta(2,2.5,size=N)
Z = np.concatenate([Z1,Z2])

Y = np.concatenate([np.repeat(0,N),np.repeat(1,N)])
df = pd.DataFrame(data={'Y' : Y,'Z' : Z})
df.index.name = 'pt'
```

```{r}
#| warning: false
library(tidyverse)
df <- tibble::tibble(
    Y = reticulate::py$Y,
    Z = reticulate::py$Z
)
df[['Y']] <- factor(df$Y,levels=c(0,1))

df %>% 
    ggplot(aes(Y,Z)) +
    geom_boxplot(outlier.size = NA,alpha=0,linewidth=2) +
    geom_point(position = position_jitter(width = .2),pch=21,fill='gray',size=3) +
    labs(x = "Response",y="Predictor") +
    theme_bw(base_size = 16)
```

```{python}
#| cache: true
import mccv
import pandas as pd

mccv_obj = mccv.mccv(num_bootstraps=200,n_jobs=4)    
mccv_obj.set_X(df[['Z']])
mccv_obj.set_Y(df[['Y']])

param_dfs=[]
for seed in range(200):
    retrained_fit = mccv_obj.mccv(seed)[1]['Logistic Regression'].__dict__
    param_dict = {k : retrained_fit[k].reshape(-1)[0] for k in ('coef_','intercept_')}
    param_df = pd.DataFrame.from_dict(param_dict,orient='index',dtype='object',columns=[seed])
    param_dfs.append(param_df)
retrained_parameters_df = pd.concat(param_dfs,axis=1).T
retrained_parameters_df.index.name='seed'
retrained_parameters_df.reset_index(inplace=True)

```

```{r}
library(tidyverse)

plot_dat <- 
    reticulate::py$retrained_parameters_df %>% 
    pivot_longer(
        cols = contains('_')
    ) %>% 
    mutate(
        seed = as.integer(seed),
        name = factor(name,levels=c("intercept_","coef_"),labels=c("Intercept","Coefficient")),
        value = as.double(value)
        )

p <- 
    plot_dat %>% 
    ggplot(aes(name,value,group=seed)) +
    geom_line() +
    scale_x_discrete(
        expand = expansion(0.01,0.01),
        name=NULL
    ) +
    scale_y_continuous(
        name="Parameter Values"
    ) +
    labs(caption='Estimated Parameters From 200 Logistic Regression Bootstraps') +
    theme_bw(base_size = 20) +
    theme(
        axis.text.x = element_text(angle=45,hjust=1,vjust=1)
    )

p + 
    stat_summary(fun=mean,color='red',geom='line',aes(group=1),linewidth=3) +
    labs(caption='Estimated Parameters From 200 Logistic Regression Bootstraps\nAverage in Red')
    
avg_values <- 
    summarise(plot_dat,`Average Value` = mean(value),.by=name) %>% 
    mutate(across(where(is.numeric),function(x)round(x,2)))

avg_values %>% 
    gt::gt()

```

We learned that on average when the predictor is 0, there is a `r intercept_ = dplyr::pull(dplyr::filter(avg_values,name=="Intercept"),"Average Value")` `r round(intercept_,2)` log of the odds or `r round(exp(intercept_),2)` odds or `r round(exp(intercept_)/(1+exp(intercept_)),2)` probability to be in the outcome group (Y=1).

On average, there is a `r coef_ = dplyr::pull(dplyr::filter(avg_values,name=="Coefficient"),"Average Value")` `r round(coef_,2)` expected change in the log of the odds or `r round(exp(coef_),2)` odds for a one-unit increase in the predictor. In other words, we expect to see a `r paste0(round(exp(coef_)/(1+exp(coef_)),2)*100,"%")` increase in the odds of being in the outcome group (Y=1) as the predictor increases by one-unit.

```{r}
library(gganimate)
#install.packages("transformr")
animp <- 
    p + 
    transition_time(seed) + 
    labs(title="Seed : {frame_time}")
animate(animp,duration = 5, fps = 20, width = 500, height = 500, renderer = gifski_renderer())
anim_save("mccv_parameters_animation.gif")
```
